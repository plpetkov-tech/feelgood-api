name: 'Security Reporter'
description: 'Generate beautiful security reporting and markdown summaries'
inputs:
  phase:
    description: 'Report phase (test-start, scan-results, container-scan, test-complete)'
    required: true
  scan-file:
    description: 'Path to scan results JSON file'
    required: false
  title:
    description: 'Title for the report section'
    required: false
  format:
    description: 'Output format (github-summary, markdown, json)'
    required: false
    default: 'github-summary'

runs:
  using: 'composite'
  steps:
    - name: üîí Validate Security Reporter Inputs
      shell: bash
      run: |
        echo "üîí Validating security reporter inputs..."
        
        # Validate phase input
        case "${{ inputs.phase }}" in
          "test-start"|"scan-results"|"container-scan"|"test-complete")
            echo "‚úÖ Valid phase: ${{ inputs.phase }}"
            ;;
          *)
            echo "‚ùå Invalid phase. Must be: test-start, scan-results, container-scan, or test-complete"
            exit 1
            ;;
        esac
        
        # Validate scan file if provided
        if [[ -n "${{ inputs.scan-file }}" ]]; then
          # Basic path validation
          if [[ ! "${{ inputs.scan-file }}" =~ ^[a-zA-Z0-9.//_-]+$ ]]; then
            echo "‚ùå Invalid scan file path format"
            exit 1
          fi
          
          # Check path length
          if [[ ${#${{ inputs.scan-file }}} -gt 256 ]]; then
            echo "‚ùå Scan file path too long"
            exit 1
          fi
          
          # Check if file exists (if not empty)
          if [[ ! -f "${{ inputs.scan-file }}" ]]; then
            echo "‚ö†Ô∏è Scan file does not exist: ${{ inputs.scan-file }}"
          fi
        fi
        
        # Validate title if provided
        if [[ -n "${{ inputs.title }}" ]]; then
          # Remove dangerous characters for markdown
          SAFE_TITLE=$(echo "${{ inputs.title }}" | sed 's/[<>&"'\''`]//g')
          if [[ ${#SAFE_TITLE} -gt 100 ]]; then
            echo "‚ùå Title too long"
            exit 1
          fi
        fi
        
        # Validate format
        case "${{ inputs.format }}" in
          "github-summary"|"markdown"|"json")
            echo "‚úÖ Valid format: ${{ inputs.format }}"
            ;;
          *)
            echo "‚ùå Invalid format. Must be: github-summary, markdown, or json"
            exit 1
            ;;
        esac
        
        echo "‚úÖ All security reporter inputs validated"

    - name: Generate Security Report
      shell: bash
      run: |
        # Create safe versions of inputs for use in output
        SAFE_TITLE=$(echo "${{ inputs.title }}" | sed 's/[<>&"'\''`]//g' | head -c 100)
        SAFE_PHASE="${{ inputs.phase }}"
        
        case "$SAFE_PHASE" in
          "test-start")
            cat >> $GITHUB_STEP_SUMMARY << EOF
        ## $SAFE_TITLE
        
        | Stage | Status | Description |
        |-------|--------|-------------|
        | üß™ Tests | üîÑ Running | Unit tests, integration tests |
        | üîç Linting | üîÑ Running | Code quality checks |
        | üõ°Ô∏è Security Audit | üîÑ Running | Dependency vulnerability scan |
        | üìã SBOM Generation | ‚è≥ Pending | Software bill of materials |
        | üîí Baseline Scan | ‚è≥ Pending | Filesystem security scan |
        
        ---
        
        EOF
            ;;
            
          "scan-results")
            if [ -f "${{ inputs.scan-file }}" ]; then
              echo "### $SAFE_TITLE" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Validate JSON file size before processing
              FILE_SIZE=$(stat -c%s "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              if [[ $FILE_SIZE -gt 10485760 ]]; then  # 10MB limit
                echo "‚ö†Ô∏è Scan file too large to process safely" >> $GITHUB_STEP_SUMMARY
                exit 0
              fi
              
              # Safely parse JSON with error handling
              TOTAL_VULNS=$(timeout 30 jq '[.Results[]?.Vulnerabilities[]?] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              CRITICAL=$(timeout 30 jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              HIGH=$(timeout 30 jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              MEDIUM=$(timeout 30 jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              LOW=$(timeout 30 jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              
              # Validate numeric values to prevent injection
              TOTAL_VULNS=$([[ "$TOTAL_VULNS" =~ ^[0-9]+$ ]] && echo "$TOTAL_VULNS" || echo "0")
              CRITICAL=$([[ "$CRITICAL" =~ ^[0-9]+$ ]] && echo "$CRITICAL" || echo "0")
              HIGH=$([[ "$HIGH" =~ ^[0-9]+$ ]] && echo "$HIGH" || echo "0")
              MEDIUM=$([[ "$MEDIUM" =~ ^[0-9]+$ ]] && echo "$MEDIUM" || echo "0")
              LOW=$([[ "$LOW" =~ ^[0-9]+$ ]] && echo "$LOW" || echo "0")
              
              echo "| üéØ Severity Level | Count | Progress |" >> $GITHUB_STEP_SUMMARY
              echo "|-------------------|-------|----------|" >> $GITHUB_STEP_SUMMARY
              echo "| üî¥ Critical | $CRITICAL | $(printf '‚ñà%.0s' $(seq 1 $((CRITICAL > 10 ? 10 : CRITICAL)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üü† High | $HIGH | $(printf '‚ñà%.0s' $(seq 1 $((HIGH > 10 ? 10 : HIGH)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üü° Medium | $MEDIUM | $(printf '‚ñà%.0s' $(seq 1 $((MEDIUM > 20 ? 20 : MEDIUM / 2)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üü¢ Low | $LOW | $(printf '‚ñà%.0s' $(seq 1 $((LOW > 30 ? 30 : LOW / 3)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üìä **Total** | **$TOTAL_VULNS** | |" >> $GITHUB_STEP_SUMMARY
              
              echo "" >> $GITHUB_STEP_SUMMARY
              
              if [ "$TOTAL_VULNS" -eq 0 ]; then
                echo "üéâ **No vulnerabilities detected in scan!**" >> $GITHUB_STEP_SUMMARY
              elif [ "$CRITICAL" -gt 0 ]; then
                echo "‚ö†Ô∏è **Critical vulnerabilities found - requires immediate attention**" >> $GITHUB_STEP_SUMMARY
              elif [ "$HIGH" -gt 0 ]; then
                echo "‚ö†Ô∏è **High severity vulnerabilities found - review recommended**" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ÑπÔ∏è **Low to medium severity vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "‚ùå Scan results file not found: ${{ inputs.scan-file }}" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "container-scan")
            if [ -f "${{ inputs.scan-file }}" ]; then
              echo "### ${{ inputs.title }}" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              TOTAL_VULNS=$(jq '[.Results[]?.Vulnerabilities[]?] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "${{ inputs.scan-file }}" 2>/dev/null || echo "0")
              
              # Create beautiful vulnerability chart
              echo "| üéØ Vulnerability Severity | Count | Visual |" >> $GITHUB_STEP_SUMMARY
              echo "|---------------------------|-------|--------|" >> $GITHUB_STEP_SUMMARY
              echo "| üî¥ Critical | **$CRITICAL** | $(printf 'üî¥%.0s' $(seq 1 $((CRITICAL > 10 ? 10 : CRITICAL)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üü† High | **$HIGH** | $(printf 'üü†%.0s' $(seq 1 $((HIGH > 10 ? 10 : HIGH)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üü° Medium | **$MEDIUM** | $(printf 'üü°%.0s' $(seq 1 $((MEDIUM > 20 ? 20 : MEDIUM / 2)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üü¢ Low | **$LOW** | $(printf 'üü¢%.0s' $(seq 1 $((LOW > 30 ? 30 : LOW / 3)))) |" >> $GITHUB_STEP_SUMMARY
              echo "| üéØ **Total Vulnerabilities** | **$TOTAL_VULNS** | |" >> $GITHUB_STEP_SUMMARY
              
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Risk assessment
              if [ "$TOTAL_VULNS" -eq 0 ]; then
                echo "üéâ **EXCELLENT**: No vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
              elif [ "$CRITICAL" -gt 0 ]; then
                echo "üö® **HIGH RISK**: Critical vulnerabilities require immediate attention" >> $GITHUB_STEP_SUMMARY
              elif [ "$HIGH" -gt 0 ]; then
                echo "‚ö†Ô∏è **MEDIUM RISK**: High severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ÑπÔ∏è **LOW RISK**: Only low to medium severity issues" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "‚ùå Container scan results not found" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "test-complete")
            echo "---" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ${{ inputs.title }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **All test and security scanning steps completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Phase**: üèóÔ∏è Container Build & Signing" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            ;;
            
          *)
            echo "Unknown phase: ${{ inputs.phase }}" >> $GITHUB_STEP_SUMMARY
            ;;
        esac