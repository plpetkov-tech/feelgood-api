name: 'VEX Processor'
description: 'Handle VEX document operations, validation, and consolidation'
inputs:
  action:
    description: 'Action to perform (consolidate-build-vex, consolidate-final-vex, validate, merge)'
    required: true
  build-vex:
    description: 'Path to build-time VEX document'
    required: false
  runtime-vex:
    description: 'Path to runtime VEX document'
    required: false
  existing-vex-dir:
    description: 'Directory containing existing VEX documents'
    required: false
  image-ref:
    description: 'Container image reference'
    required: false
  output:
    description: 'Output file path'
    required: false
    default: 'consolidated.vex.json'

runs:
  using: 'composite'
  steps:
    - name: Process VEX Documents
      shell: bash
      run: |
        case "${{ inputs.action }}" in
          "consolidate-build-vex")
            echo "🔄 Creating initial consolidated VEX (build-time + existing)..."
            
            # Start with build-time VEX
            if [ -f "${{ inputs.build-vex }}" ]; then
              cp "${{ inputs.build-vex }}" "${{ inputs.output }}"
              echo "### 🔄 VEX Consolidation Process" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Started with build-time VEX**" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **No build-time VEX found, creating new document**" >> $GITHUB_STEP_SUMMARY
              COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
              cat > "${{ inputs.output }}" << EOF
        {
          "@context": "https://openvex.dev/ns/v0.2.0",
          "@id": "https://openvex.dev/docs/public/vex-build-$(date +%Y%m%d%H%M%S)",
          "author": "$COMMIT_AUTHOR",
          "timestamp": "$(date -Iseconds)",
          "version": 1,
          "statements": []
        }
        EOF
            fi
            
            # Merge existing VEX documents if any exist
            if [ -d "${{ inputs.existing-vex-dir }}" ] && [ "$(ls -A ${{ inputs.existing-vex-dir }}/*.vex.json 2>/dev/null)" ]; then
              echo "🔗 **Merging with existing VEX documents...**" >> $GITHUB_STEP_SUMMARY
              MERGED_COUNT=0
              for vex_file in ${{ inputs.existing-vex-dir }}/*.vex.json; do
                if [ -f "$vex_file" ]; then
                  STATEMENTS_COUNT=$(jq '.statements | length' "$vex_file" 2>/dev/null || echo "0")
                  echo "  📄 Merging: $(basename $vex_file) ($STATEMENTS_COUNT statements)" >> $GITHUB_STEP_SUMMARY
                  # Use vexctl to merge VEX documents if they have valid content
                  if jq empty "$vex_file" 2>/dev/null && [ "$STATEMENTS_COUNT" -gt 0 ]; then
                    vexctl merge \
                      --product="pkg:oci/${{ inputs.image-ref }}" \
                      "${{ inputs.output }}" \
                      "$vex_file" > temp.vex.json && mv temp.vex.json "${{ inputs.output }}"
                    MERGED_COUNT=$((MERGED_COUNT + 1))
                    echo "    ✅ Successfully merged $STATEMENTS_COUNT statements" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "    ⚠️ Skipped: $(basename $vex_file) (0 statements or invalid JSON)" >> $GITHUB_STEP_SUMMARY
                  fi
                fi
              done
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Merged $MERGED_COUNT existing VEX documents**" >> $GITHUB_STEP_SUMMARY
            else
              echo "ℹ️ **No existing VEX documents to merge**" >> $GITHUB_STEP_SUMMARY
            fi
            
            FINAL_STATEMENTS=$(jq '.statements | length' "${{ inputs.output }}" 2>/dev/null || echo "0")
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Initial consolidation complete with $FINAL_STATEMENTS total statements**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "consolidate-final-vex")
            echo "🔄 Creating final consolidated VEX document..."
            
            echo "### 🔄 Final VEX Consolidation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Start with build-time consolidated VEX or create new one
            if [ -f "${{ inputs.build-vex }}" ]; then
              cp "${{ inputs.build-vex }}" "${{ inputs.output }}"
              BUILD_STATEMENTS=$(jq '.statements | length' "${{ inputs.build-vex }}" 2>/dev/null || echo "0")
              echo "✅ **Started with build-time consolidated VEX** ($BUILD_STATEMENTS statements)" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **No build-time VEX found, creating new document**" >> $GITHUB_STEP_SUMMARY
              COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
              cat > "${{ inputs.output }}" << EOF
        {
          "@context": "https://openvex.dev/ns/v0.2.0",
          "@id": "https://openvex.dev/docs/public/vex-final-$(date +%Y%m%d%H%M%S)",
          "author": "$COMMIT_AUTHOR",
          "timestamp": "$(date -Iseconds)",
          "version": 1,
          "statements": []
        }
        EOF
            fi
            
            # Merge runtime VEX if available
            if [ -f "${{ inputs.runtime-vex }}" ] && jq empty "${{ inputs.runtime-vex }}" 2>/dev/null; then
              RUNTIME_STATEMENTS=$(jq '.statements | length' "${{ inputs.runtime-vex }}" 2>/dev/null || echo "0")
              if [ "$RUNTIME_STATEMENTS" -gt 0 ]; then
                echo "🔗 **Merging runtime VEX** ($RUNTIME_STATEMENTS statements)" >> $GITHUB_STEP_SUMMARY
                
                # Use vexctl to merge runtime VEX
                vexctl merge \
                  --product="pkg:oci/${{ inputs.image-ref }}" \
                  "${{ inputs.output }}" \
                  "${{ inputs.runtime-vex }}" > temp-final.vex.json
                
                mv temp-final.vex.json "${{ inputs.output }}"
                echo "✅ **Runtime VEX merged successfully**" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ **Runtime VEX found but contains 0 statements**" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "⚠️ **No valid runtime VEX to merge**" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Also merge any additional VEX documents from existing-vex-dir if specified
            if [ -n "${{ inputs.existing-vex-dir }}" ] && [ -d "${{ inputs.existing-vex-dir }}" ]; then
              echo "🔗 **Merging additional VEX documents from ${{ inputs.existing-vex-dir }}...**" >> $GITHUB_STEP_SUMMARY
              ADDITIONAL_COUNT=0
              for vex_file in ${{ inputs.existing-vex-dir }}/*.vex.json; do
                if [ -f "$vex_file" ]; then
                  STATEMENTS_COUNT=$(jq '.statements | length' "$vex_file" 2>/dev/null || echo "0")
                  if jq empty "$vex_file" 2>/dev/null && [ "$STATEMENTS_COUNT" -gt 0 ]; then
                    # Skip if this file was already processed in build-time consolidation
                    if [ "$(basename $vex_file)" != "$(basename ${{ inputs.build-vex }})" ] && [ "$(basename $vex_file)" != "$(basename ${{ inputs.runtime-vex }})" ]; then
                      echo "  📄 Adding: $(basename $vex_file) ($STATEMENTS_COUNT statements)" >> $GITHUB_STEP_SUMMARY
                      vexctl merge \
                        --product="pkg:oci/${{ inputs.image-ref }}" \
                        "${{ inputs.output }}" \
                        "$vex_file" > temp-additional.vex.json && mv temp-additional.vex.json "${{ inputs.output }}"
                      ADDITIONAL_COUNT=$((ADDITIONAL_COUNT + 1))
                    fi
                  fi
                fi
              done
              if [ $ADDITIONAL_COUNT -gt 0 ]; then
                echo "✅ **Merged $ADDITIONAL_COUNT additional VEX documents**" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            FINAL_STATEMENTS=$(jq '.statements | length' "${{ inputs.output }}" 2>/dev/null || echo "0")
            NOT_AFFECTED=$(jq '.statements | map(select(.status == "not_affected")) | length' "${{ inputs.output }}" 2>/dev/null || echo "0")
            AFFECTED=$(jq '.statements | map(select(.status == "affected")) | length' "${{ inputs.output }}" 2>/dev/null || echo "0")
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 🎯 Final VEX Summary | Count | Percentage |" >> $GITHUB_STEP_SUMMARY
            echo "|---------------------|-------|------------|" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Total Statements | $FINAL_STATEMENTS | 100% |" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Not Affected | $NOT_AFFECTED | $((FINAL_STATEMENTS > 0 ? NOT_AFFECTED * 100 / FINAL_STATEMENTS : 0))% |" >> $GITHUB_STEP_SUMMARY
            echo "| ⚠️ Affected | $AFFECTED | $((FINAL_STATEMENTS > 0 ? AFFECTED * 100 / FINAL_STATEMENTS : 0))% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "validate")
            echo "🔍 Validating VEX document..."
            
            if [ ! -f "${{ inputs.build-vex }}" ]; then
              echo "❌ VEX document not found: ${{ inputs.build-vex }}"
              exit 1
            fi
            
            if jq empty "${{ inputs.build-vex }}" 2>/dev/null; then
              STATEMENTS=$(jq '.statements | length' "${{ inputs.build-vex }}" 2>/dev/null || echo "0")
              echo "✅ VEX document is valid JSON with $STATEMENTS statements"
              
              # Check required fields
              if jq -e '.["@context"]' "${{ inputs.build-vex }}" >/dev/null 2>&1; then
                echo "✅ @context field present"
              else
                echo "⚠️ Missing @context field"
              fi
              
              if jq -e '.statements[]' "${{ inputs.build-vex }}" >/dev/null 2>&1; then
                echo "✅ VEX statements present"
              else
                echo "⚠️ No VEX statements found"
              fi
            else
              echo "❌ Invalid JSON in VEX document"
              exit 1
            fi
            ;;
            
          *)
            echo "❌ Unknown action: ${{ inputs.action }}"
            exit 1
            ;;
        esac