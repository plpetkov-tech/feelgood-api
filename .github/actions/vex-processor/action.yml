name: 'VEX Processor'
description: 'Handle VEX document operations, validation, and consolidation'
inputs:
  action:
    description: 'Action to perform (consolidate-build-vex, consolidate-final-vex, validate, merge)'
    required: true
  build-vex:
    description: 'Path to build-time VEX document'
    required: false
  runtime-vex:
    description: 'Path to runtime VEX document'
    required: false
  existing-vex-dir:
    description: 'Directory containing existing VEX documents'
    required: false
  image-ref:
    description: 'Container image reference'
    required: false
  output:
    description: 'Output file path'
    required: false
    default: 'consolidated.vex.json'

runs:
  using: 'composite'
  steps:
    - name: 🔒 Validate VEX Processor Inputs
      shell: bash
      run: |
        echo "🔒 Validating VEX processor inputs..."
        
        # Validate action input
        case "${{ inputs.action }}" in
          "consolidate-build-vex"|"consolidate-final-vex"|"validate"|"merge")
            echo "✅ Valid action: ${{ inputs.action }}"
            ;;
          *)
            echo "❌ Invalid action. Must be: consolidate-build-vex, consolidate-final-vex, validate, or merge"
            exit 1
            ;;
        esac
        
        # Validate file paths if provided
        for input_name in "build-vex" "runtime-vex" "existing-vex-dir" "output"; do
          case $input_name in
            "build-vex")
              input_value="${{ inputs.build-vex }}"
              ;;
            "runtime-vex")
              input_value="${{ inputs.runtime-vex }}"
              ;;
            "existing-vex-dir")
              input_value="${{ inputs.existing-vex-dir }}"
              ;;
            "output")
              input_value="${{ inputs.output }}"
              ;;
          esac
          
          if [[ -n "$input_value" ]]; then
            # Basic path validation - no directory traversal
            if [[ "$input_value" == *".."* ]] || [[ "$input_value" == "/"* ]]; then
              echo "❌ Invalid $input_name path: potential directory traversal"
              exit 1
            fi
            
            # Length check
            if [[ ${#input_value} -gt 256 ]]; then
              echo "❌ $input_name path too long"
              exit 1
            fi
            
            # Character validation - allow only safe characters
            if [[ ! "$input_value" =~ ^[a-zA-Z0-9.//_-]+$ ]]; then
              echo "❌ Invalid characters in $input_name path"
              exit 1
            fi
          fi
        done
        
        # Validate image reference if provided
        IMAGE_REF="${{ inputs.image-ref }}"
        if [[ -n "$IMAGE_REF" ]]; then
          if [[ ! "$IMAGE_REF" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\.-]*[a-zA-Z0-9])?(/[a-zA-Z0-9]([a-zA-Z0-9\.-]*[a-zA-Z0-9])?)*(@sha256:[a-f0-9]{64}|:[a-zA-Z0-9]([a-zA-Z0-9\.-]*[a-zA-Z0-9])?)$ ]]; then
            echo "❌ Invalid image reference format"
            exit 1
          fi
          
          if [[ ${#IMAGE_REF} -gt 512 ]]; then
            echo "❌ Image reference too long"
            exit 1
          fi
        fi
        
        echo "✅ All VEX processor inputs validated"

    - name: Process VEX Documents
      shell: bash
      run: |
        # Use validated inputs
        ACTION="${{ inputs.action }}"
        BUILD_VEX="${{ inputs.build-vex }}"
        RUNTIME_VEX="${{ inputs.runtime-vex }}"
        EXISTING_VEX_DIR="${{ inputs.existing-vex-dir }}"
        IMAGE_REF="${{ inputs.image-ref }}"
        OUTPUT="${{ inputs.output }}"
        
        case "$ACTION" in
          "consolidate-build-vex")
            echo "🔄 Creating initial consolidated VEX (build-time only, no existing merge)..."
            
            echo "### 🔄 VEX Consolidation Process" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Start with build-time VEX ONLY - no merging with existing to avoid product ID conflicts
            if [ -f "$BUILD_VEX" ]; then
              # Validate JSON before copying
              if jq empty "$BUILD_VEX" 2>/dev/null; then
                cp "$BUILD_VEX" "$OUTPUT"
                BUILD_STATEMENTS=$(jq '.statements | length' "$BUILD_VEX" 2>/dev/null || echo "0")
                echo "✅ **Started with build-time VEX** ($BUILD_STATEMENTS statements)" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ **Invalid build-time VEX JSON format**" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            else
              echo "⚠️ **No build-time VEX found, creating new document**" >> $GITHUB_STEP_SUMMARY
              # Safe git command execution
              COMMIT_AUTHOR=$(timeout 10 git log -1 --pretty=format:'%an <%ae>' 2>/dev/null | head -c 100 || echo "Unknown <unknown@example.com>")
              cat > "$OUTPUT" << EOF
        {
          "@context": "https://openvex.dev/ns/v0.2.0",
          "@id": "https://openvex.dev/docs/public/vex-build-$(date +%Y%m%d%H%M%S)",
          "author": "$COMMIT_AUTHOR",
          "timestamp": "$(date -Iseconds)",
          "version": 1,
          "statements": []
        }
        EOF
              BUILD_STATEMENTS=0
            fi
            
            # SKIP merging existing VEX documents due to product ID format conflicts
            echo "⚠️ **Skipping existing VEX merge due to product identifier format conflicts**" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Build-time VEX provides static analysis, runtime VEX handled separately**" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Initial consolidation complete with $BUILD_STATEMENTS total statements**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "consolidate-final-vex")
            echo "🔄 Creating final consolidated VEX document..."
            
            echo "### 🔄 Final VEX Consolidation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Use RUNTIME VEX as primary source (it's the only reliable one)
            RUNTIME_VEX_USED=false
            if [ -f "${{ inputs.runtime-vex }}" ] && jq empty "${{ inputs.runtime-vex }}" 2>/dev/null; then
              RUNTIME_STATEMENTS=$(jq '.statements | length' "${{ inputs.runtime-vex }}" 2>/dev/null || echo "0")
              if [ "$RUNTIME_STATEMENTS" -gt 0 ]; then
                echo "🔗 **Using runtime VEX as primary source** ($RUNTIME_STATEMENTS statements)" >> $GITHUB_STEP_SUMMARY
                cp "${{ inputs.runtime-vex }}" "${{ inputs.output }}"
                RUNTIME_VEX_USED=true
              fi
            fi
            
            # Check if we found reliable runtime VEX in existing sources
            if [ "$RUNTIME_VEX_USED" = "false" ] && [ -n "${{ inputs.existing-vex-dir }}" ] && [ -d "${{ inputs.existing-vex-dir }}" ]; then
              echo "🔍 **Looking for reliable runtime VEX in existing sources...**" >> $GITHUB_STEP_SUMMARY
              for vex_file in ${{ inputs.existing-vex-dir }}/*.vex.json; do
                if [ -f "$vex_file" ] && [[ "$(basename $vex_file)" == *"runtime"* ]]; then
                  STATEMENTS_COUNT=$(jq '.statements | length' "$vex_file" 2>/dev/null || echo "0")
                  if jq empty "$vex_file" 2>/dev/null && [ "$STATEMENTS_COUNT" -gt 0 ]; then
                    echo "📄 **Found reliable runtime VEX**: $(basename $vex_file) ($STATEMENTS_COUNT statements)" >> $GITHUB_STEP_SUMMARY
                    cp "$vex_file" "${{ inputs.output }}"
                    RUNTIME_VEX_USED=true
                    break
                  fi
                fi
              done
            fi
            
            # If no runtime VEX found, use build-time as fallback
            if [ "$RUNTIME_VEX_USED" = "false" ]; then
              echo "⚠️ **No reliable runtime VEX found, using build-time VEX as fallback**" >> $GITHUB_STEP_SUMMARY
              if [ -f "${{ inputs.build-vex }}" ] && jq empty "${{ inputs.build-vex }}" 2>/dev/null; then
                BUILD_STATEMENTS=$(jq '.statements | length' "${{ inputs.build-vex }}" 2>/dev/null || echo "0")
                cp "${{ inputs.build-vex }}" "${{ inputs.output }}"
                echo "✅ **Using build-time VEX** ($BUILD_STATEMENTS statements)" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ **No valid VEX sources found, creating minimal document**" >> $GITHUB_STEP_SUMMARY
                COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
                cat > "${{ inputs.output }}" << EOF
        {
          "@context": "https://openvex.dev/ns/v0.2.0",
          "@id": "https://openvex.dev/docs/public/vex-final-$(date +%Y%m%d%H%M%S)",
          "author": "$COMMIT_AUTHOR",
          "timestamp": "$(date -Iseconds)",
          "version": 1,
          "statements": []
        }
        EOF
              fi
            fi
            
            FINAL_STATEMENTS=$(jq '.statements | length' "${{ inputs.output }}" 2>/dev/null || echo "0")
            NOT_AFFECTED=$(jq '.statements | map(select(.status == "not_affected")) | length' "${{ inputs.output }}" 2>/dev/null || echo "0")
            AFFECTED=$(jq '.statements | map(select(.status == "affected")) | length' "${{ inputs.output }}" 2>/dev/null || echo "0")
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 🎯 Final VEX Summary | Count | Percentage |" >> $GITHUB_STEP_SUMMARY
            echo "|---------------------|-------|------------|" >> $GITHUB_STEP_SUMMARY
            echo "| 📊 Total Statements | $FINAL_STATEMENTS | 100% |" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Not Affected | $NOT_AFFECTED | $((FINAL_STATEMENTS > 0 ? NOT_AFFECTED * 100 / FINAL_STATEMENTS : 0))% |" >> $GITHUB_STEP_SUMMARY
            echo "| ⚠️ Affected | $AFFECTED | $((FINAL_STATEMENTS > 0 ? AFFECTED * 100 / FINAL_STATEMENTS : 0))% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            ;;
            
          "validate")
            echo "🔍 Validating VEX document..."
            
            if [ ! -f "${{ inputs.build-vex }}" ]; then
              echo "❌ VEX document not found: ${{ inputs.build-vex }}"
              exit 1
            fi
            
            if jq empty "${{ inputs.build-vex }}" 2>/dev/null; then
              STATEMENTS=$(jq '.statements | length' "${{ inputs.build-vex }}" 2>/dev/null || echo "0")
              echo "✅ VEX document is valid JSON with $STATEMENTS statements"
              
              # Check required fields
              if jq -e '.["@context"]' "${{ inputs.build-vex }}" >/dev/null 2>&1; then
                echo "✅ @context field present"
              else
                echo "⚠️ Missing @context field"
              fi
              
              if jq -e '.statements[]' "${{ inputs.build-vex }}" >/dev/null 2>&1; then
                echo "✅ VEX statements present"
              else
                echo "⚠️ No VEX statements found"
              fi
            else
              echo "❌ Invalid JSON in VEX document"
              exit 1
            fi
            ;;
            
          *)
            echo "❌ Unknown action: ${{ inputs.action }}"
            exit 1
            ;;
        esac