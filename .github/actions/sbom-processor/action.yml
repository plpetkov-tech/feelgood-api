name: 'SBOM Processor'
description: 'Process and consolidate multiple SBOM types (build-time, runtime-filtered, container) for SLSA Level 3 compliance'
author: 'DevSecOps Pipeline'

inputs:
  build-sbom-artifact:
    description: 'Build-time SBOM artifact name'
    required: true
  runtime-filtered-sbom-artifact:
    description: 'Runtime filtered SBOM artifact name'
    required: false
  container-image:
    description: 'Container image reference for container SBOM generation'
    required: true
  output-prefix:
    description: 'Prefix for output SBOM files'
    required: false
    default: 'consolidated'

outputs:
  build-sbom-path:
    description: 'Path to processed build-time SBOM'
    value: ${{ steps.process.outputs.build-sbom-path }}
  runtime-filtered-sbom-path:
    description: 'Path to processed runtime filtered SBOM'
    value: ${{ steps.process.outputs.runtime-filtered-sbom-path }}
  container-sbom-path:
    description: 'Path to generated container SBOM'
    value: ${{ steps.process.outputs.container-sbom-path }}
  consolidated-sbom-path:
    description: 'Path to consolidated multi-layer SBOM'
    value: ${{ steps.process.outputs.consolidated-sbom-path }}

runs:
  using: 'composite'
  steps:
    - name: üîí Validate Inputs
      shell: bash
      run: |
        echo "üîí Validating SBOM processor inputs..."
        
        # Validate build-sbom-artifact
        BUILD_SBOM_ARTIFACT="${{ inputs.build-sbom-artifact }}"
        if [[ -z "$BUILD_SBOM_ARTIFACT" ]]; then
          echo "‚ùå Build SBOM artifact name is required"
          exit 1
        fi
        
        if [[ ! "$BUILD_SBOM_ARTIFACT" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9]$ ]]; then
          echo "‚ùå Invalid build SBOM artifact name format"
          exit 1
        fi
        
        if [[ ${#BUILD_SBOM_ARTIFACT} -gt 100 ]]; then
          echo "‚ùå Build SBOM artifact name too long"
          exit 1
        fi
        
        # Validate runtime-filtered-sbom-artifact if provided
        RUNTIME_FILTERED_SBOM_ARTIFACT="${{ inputs.runtime-filtered-sbom-artifact }}"
        if [[ -n "$RUNTIME_FILTERED_SBOM_ARTIFACT" ]]; then
          if [[ ! "$RUNTIME_FILTERED_SBOM_ARTIFACT" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9]$ ]]; then
            echo "‚ùå Invalid runtime filtered SBOM artifact name format"
            exit 1
          fi
          
          if [[ ${#RUNTIME_FILTERED_SBOM_ARTIFACT} -gt 100 ]]; then
            echo "‚ùå Runtime filtered SBOM artifact name too long"
            exit 1
          fi
        fi
        
        # Validate container image reference
        CONTAINER_IMAGE="${{ inputs.container-image }}"
        if [[ -z "$CONTAINER_IMAGE" ]]; then
          echo "‚ùå Container image reference is required"
          exit 1
        fi
        
        if [[ ! "$CONTAINER_IMAGE" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\.-]*[a-zA-Z0-9])?(/[a-zA-Z0-9]([a-zA-Z0-9\.-]*[a-zA-Z0-9])?)*(@sha256:[a-f0-9]{64}|:[a-zA-Z0-9]([a-zA-Z0-9\.-]*[a-zA-Z0-9])?)$ ]]; then
          echo "‚ùå Invalid container image reference format"
          exit 1
        fi
        
        if [[ ${#CONTAINER_IMAGE} -gt 512 ]]; then
          echo "‚ùå Container image reference too long"
          exit 1
        fi
        
        # Validate output prefix
        OUTPUT_PREFIX="${{ inputs.output-prefix }}"
        if [[ ! "$OUTPUT_PREFIX" =~ ^[a-zA-Z0-9][a-zA-Z0-9_-]*$ ]]; then
          echo "‚ùå Invalid output prefix format. Must start with alphanumeric and contain only alphanumeric, hyphens, and underscores"
          exit 1
        fi
        
        if [[ ${#OUTPUT_PREFIX} -gt 50 ]]; then
          echo "‚ùå Output prefix too long"
          exit 1
        fi
        
        echo "‚úÖ All inputs validated successfully"

    - name: üîç Debug artifact information
      shell: bash
      run: |
        echo "üîç Debugging artifact inputs..."
        echo "Build SBOM artifact: '${{ inputs.build-sbom-artifact }}'"
        echo "Runtime filtered SBOM artifact: '${{ inputs.runtime-filtered-sbom-artifact }}'"
        echo "Container image: '${{ inputs.container-image }}'"
        
        # Create processing directory
        mkdir -p sbom-processing
        
    - name: üìã Download build-time SBOM
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
      with:
        name: ${{ inputs.build-sbom-artifact }}
        path: sbom-processing/
      continue-on-error: true

    - name: üì¶ Download runtime filtered SBOM
      if: inputs.runtime-filtered-sbom-artifact != '' && inputs.runtime-filtered-sbom-artifact != null
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
      with:
        name: ${{ inputs.runtime-filtered-sbom-artifact }}
        path: sbom-processing/
      continue-on-error: true

    - name: üîß Create placeholder files for missing SBOMs
      shell: bash
      run: |
        echo "üîß Ensuring SBOM files exist..."
        
        # List all downloaded files for debugging
        echo "üìÅ Contents of sbom-processing directory:"
        ls -la sbom-processing/ || echo "Directory doesn't exist yet"
        
        # Check if build-time SBOM was downloaded
        if [ ! -f "sbom-processing/sbom.json" ]; then
          echo "‚ö†Ô∏è Build-time SBOM not found, creating placeholder"
          echo '{"bomFormat": "CycloneDX", "specVersion": "1.4", "components": [], "metadata": {"timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'", "component": {"type": "library", "name": "placeholder"}}}' > sbom-processing/sbom.json
        else
          echo "‚úÖ Build-time SBOM found: sbom-processing/sbom.json"
          COMPONENTS=$(jq '.components | length' sbom-processing/sbom.json 2>/dev/null || echo "unknown")
          echo "   üì¶ Components: $COMPONENTS"
        fi
        
        # Check if runtime filtered SBOM was downloaded
        if [ ! -f "sbom-processing/runtime-filtered.sbom.json" ]; then
          echo "‚ö†Ô∏è Runtime filtered SBOM not found, creating placeholder"
          echo '{"bomFormat": "CycloneDX", "specVersion": "1.4", "components": [], "metadata": {"timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'", "component": {"type": "library", "name": "runtime-filtered-placeholder"}}}' > sbom-processing/runtime-filtered.sbom.json
        else
          echo "‚úÖ Runtime filtered SBOM found: sbom-processing/runtime-filtered.sbom.json"
          COMPONENTS=$(jq '.components | length' sbom-processing/runtime-filtered.sbom.json 2>/dev/null || echo "unknown")
          echo "   üéØ Filtered components: $COMPONENTS"
        fi
        
        # Final verification
        echo "üìã Final file verification:"
        for file in sbom-processing/sbom.json sbom-processing/runtime-filtered.sbom.json; do
          if [ -f "$file" ]; then
            SIZE=$(stat -c%s "$file")
            echo "  ‚úÖ $(basename $file): ${SIZE} bytes"
          else
            echo "  ‚ùå $(basename $file): missing"
          fi
        done

    - name: üîß Install SBOM tools
      shell: bash
      run: |
        echo "üîß Installing SBOM processing tools..."
        
        # Install Trivy for container SBOM generation (reuse existing installation logic)
        if ! command -v trivy &> /dev/null; then
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
        fi
        
        # Install cyclonedx-cli for SBOM manipulation with pinned versions
        pip install cyclonedx-bom==4.3.0 cyclonedx-python-lib==7.4.1
        
        # Verify installations
        trivy --version
        cyclonedx-py --version

    - name: üèóÔ∏è Generate container SBOM
      shell: bash
      run: |
        echo "üèóÔ∏è Generating container SBOM with Trivy..."
        
        # Generate container SBOM using Trivy (input already validated)
        trivy image "${{ inputs.container-image }}" \
          --format cyclonedx \
          --output sbom-processing/container.sbom.json \
          --timeout 5m \
          --quiet
        
        echo "‚úÖ Container SBOM generated successfully"
        
        # Validate the generated SBOM
        if jq empty sbom-processing/container.sbom.json 2>/dev/null; then
          CONTAINER_COMPONENTS=$(jq '.components | length' sbom-processing/container.sbom.json)
          echo "üìä Container SBOM contains $CONTAINER_COMPONENTS components"
        else
          echo "‚ùå Container SBOM generation failed, creating placeholder"
          echo '{"bomFormat": "CycloneDX", "specVersion": "1.4", "components": []}' > sbom-processing/container.sbom.json
        fi

    - name: üìä Process and consolidate SBOMs
      id: process
      shell: bash
      run: |
        echo "üìä Processing multiple SBOM types for SLSA Level 3 compliance..."
        
        cd sbom-processing
        
        # Initialize output paths
        BUILD_SBOM_PATH=""
        RUNTIME_FILTERED_SBOM_PATH=""
        CONTAINER_SBOM_PATH="$(pwd)/container.sbom.json"
        
        # Process build-time SBOM
        if [ -f "sbom.json" ]; then
          echo "‚úÖ Found build-time SBOM"
          cp sbom.json "${{ inputs.output-prefix }}-build.sbom.json"
          BUILD_SBOM_PATH="$(pwd)/${{ inputs.output-prefix }}-build.sbom.json"
          
          if jq empty "${{ inputs.output-prefix }}-build.sbom.json" 2>/dev/null; then
            BUILD_COMPONENTS=$(jq '.components | length' "${{ inputs.output-prefix }}-build.sbom.json")
            echo "üì¶ Build-time SBOM: $BUILD_COMPONENTS components"
          fi
        else
          echo "‚ö†Ô∏è No build-time SBOM found"
        fi
        
        # Process runtime filtered SBOM
        if [ -f "runtime-filtered.sbom.json" ]; then
          echo "‚úÖ Found runtime filtered SBOM"
          cp runtime-filtered.sbom.json "${{ inputs.output-prefix }}-runtime-filtered.sbom.json"
          RUNTIME_FILTERED_SBOM_PATH="$(pwd)/${{ inputs.output-prefix }}-runtime-filtered.sbom.json"
          
          if jq empty "${{ inputs.output-prefix }}-runtime-filtered.sbom.json" 2>/dev/null; then
            RUNTIME_COMPONENTS=$(jq '.components | length' "${{ inputs.output-prefix }}-runtime-filtered.sbom.json")
            echo "üéØ Runtime filtered SBOM: $RUNTIME_COMPONENTS components"
          fi
        else
          echo "‚ö†Ô∏è No runtime filtered SBOM found"
        fi
        
        # Create consolidated multi-layer SBOM
        echo "üîÑ Creating consolidated multi-layer SBOM..."
        
        cat > "${{ inputs.output-prefix }}-consolidated.sbom.json" << 'EOF'
        {
          "bomFormat": "CycloneDX",
          "specVersion": "1.4",
          "serialNumber": "urn:uuid:$(uuidgen)",
          "version": 1,
          "metadata": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "tools": [
              {
                "vendor": "SLSA Level 3 Pipeline",
                "name": "Multi-Layer SBOM Processor",
                "version": "1.0.0"
              }
            ],
            "component": {
              "type": "container",
              "name": "${{ inputs.container-image }}",
              "version": "latest"
            },
            "properties": [
              {
                "name": "slsa:build_type",
                "value": "https://slsa.dev/provenance/v1"
              },
              {
                "name": "sbom:layer_types",
                "value": "build-time,runtime-filtered,container"
              }
            ]
          },
          "components": [],
          "compositions": []
        }
        EOF
        
        # Process and merge components from all SBOMs
        python3 << 'PYTHON_EOF'
        import json
        import sys
        from pathlib import Path
        
        consolidated = {}
        
        # Load base consolidated SBOM
        with open('${{ inputs.output-prefix }}-consolidated.sbom.json', 'r') as f:
            consolidated = json.load(f)
        
        all_components = []
        compositions = []
        
        # Process build-time SBOM
        build_sbom_file = '${{ inputs.output-prefix }}-build.sbom.json'
        if Path(build_sbom_file).exists():
            with open(build_sbom_file, 'r') as f:
                build_sbom = json.load(f)
                if 'components' in build_sbom:
                    for comp in build_sbom['components']:
                        comp['scope'] = 'required'
                        comp['properties'] = comp.get('properties', [])
                        comp['properties'].append({
                            'name': 'slsa:layer',
                            'value': 'build-time'
                        })
                        all_components.append(comp)
                    
                    compositions.append({
                        'aggregate': 'incomplete',
                        'assemblies': [f"ref:{comp.get('bom-ref', comp.get('name', 'unknown'))}" for comp in build_sbom.get('components', [])][:10],
                        'dependencies': [],
                        'description': f"Build-time dependencies ({len(build_sbom.get('components', []))} components)"
                    })
        
        # Process runtime filtered SBOM
        runtime_sbom_file = '${{ inputs.output-prefix }}-runtime-filtered.sbom.json'
        if Path(runtime_sbom_file).exists():
            with open(runtime_sbom_file, 'r') as f:
                runtime_sbom = json.load(f)
                if 'components' in runtime_sbom:
                    for comp in runtime_sbom['components']:
                        comp['scope'] = 'required'
                        comp['properties'] = comp.get('properties', [])
                        comp['properties'].append({
                            'name': 'slsa:layer',
                            'value': 'runtime-filtered'
                        })
                        comp['properties'].append({
                            'name': 'kubescape:relevancy',
                            'value': 'active'
                        })
                        all_components.append(comp)
                    
                    compositions.append({
                        'aggregate': 'complete',
                        'assemblies': [f"ref:{comp.get('bom-ref', comp.get('name', 'unknown'))}" for comp in runtime_sbom.get('components', [])][:10],
                        'dependencies': [],
                        'description': f"Runtime-relevant components ({len(runtime_sbom.get('components', []))} components)"
                    })
        
        # Process container SBOM
        container_sbom_file = 'container.sbom.json'
        if Path(container_sbom_file).exists():
            with open(container_sbom_file, 'r') as f:
                container_sbom = json.load(f)
                if 'components' in container_sbom:
                    for comp in container_sbom['components']:
                        comp['scope'] = 'required'
                        comp['properties'] = comp.get('properties', [])
                        comp['properties'].append({
                            'name': 'slsa:layer',
                            'value': 'container'
                        })
                        all_components.append(comp)
                    
                    compositions.append({
                        'aggregate': 'complete',
                        'assemblies': [f"ref:{comp.get('bom-ref', comp.get('name', 'unknown'))}" for comp in container_sbom.get('components', [])][:10],
                        'dependencies': [],
                        'description': f"Container image components ({len(container_sbom.get('components', []))} components)"
                    })
        
        # Update consolidated SBOM
        consolidated['components'] = all_components
        consolidated['compositions'] = compositions
        
        # Add summary to metadata
        consolidated['metadata']['properties'].extend([
            {
                'name': 'sbom:total_components',
                'value': str(len(all_components))
            },
            {
                'name': 'sbom:layers_processed',
                'value': str(len(compositions))
            }
        ])
        
        # Write consolidated SBOM
        with open('${{ inputs.output-prefix }}-consolidated.sbom.json', 'w') as f:
            json.dump(consolidated, f, indent=2)
        
        print(f"‚úÖ Consolidated SBOM created with {len(all_components)} total components across {len(compositions)} layers")
        PYTHON_EOF
        
        CONSOLIDATED_SBOM_PATH="$(pwd)/${{ inputs.output-prefix }}-consolidated.sbom.json"
        
        # Set outputs
        echo "build-sbom-path=$BUILD_SBOM_PATH" >> $GITHUB_OUTPUT
        echo "runtime-filtered-sbom-path=$RUNTIME_FILTERED_SBOM_PATH" >> $GITHUB_OUTPUT
        echo "container-sbom-path=$CONTAINER_SBOM_PATH" >> $GITHUB_OUTPUT
        echo "consolidated-sbom-path=$CONSOLIDATED_SBOM_PATH" >> $GITHUB_OUTPUT
        
        # Summary
        echo "üìä SBOM Processing Summary:"
        echo "  üèóÔ∏è Build-time SBOM: $([ -n "$BUILD_SBOM_PATH" ] && echo "‚úÖ Processed" || echo "‚ùå Missing")"
        echo "  üéØ Runtime filtered SBOM: $([ -n "$RUNTIME_FILTERED_SBOM_PATH" ] && echo "‚úÖ Processed" || echo "‚ùå Missing")"
        echo "  üì¶ Container SBOM: ‚úÖ Generated"
        echo "  üîÑ Consolidated SBOM: ‚úÖ Created"
        
        if jq empty "${{ inputs.output-prefix }}-consolidated.sbom.json" 2>/dev/null; then
          TOTAL_COMPONENTS=$(jq '.components | length' "${{ inputs.output-prefix }}-consolidated.sbom.json")
          TOTAL_LAYERS=$(jq '.compositions | length' "${{ inputs.output-prefix }}-consolidated.sbom.json")
          echo "  üìà Total components: $TOTAL_COMPONENTS across $TOTAL_LAYERS layers"
        fi
