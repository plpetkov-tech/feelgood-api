name: üèóÔ∏è Build and Test

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      image-name:
        required: true
        type: string
    outputs:
      image-digest:
        description: "Container image digest"
        value: ${{ jobs.build-container.outputs.image-digest }}
      image-uri:
        description: "Container image URI"
        value: ${{ jobs.build-container.outputs.image-uri }}
      sbom-artifact:
        description: "SBOM artifact ID"
        value: ${{ jobs.test-and-scan.outputs.sbom-artifact }}
      scan-artifact:
        description: "Baseline scan artifact ID"
        value: ${{ jobs.test-and-scan.outputs.scan-artifact }}

env:
  REGISTRY: ${{ inputs.registry }}
  IMAGE_NAME: ${{ inputs.image-name }}

jobs:
  test-and-scan:
    runs-on: ubuntu-latest
    outputs:
      sbom-artifact: ${{ steps.upload-sbom.outputs.artifact-id }}
      scan-artifact: ${{ steps.upload-scan.outputs.artifact-id }}
    steps:
    - uses: actions/checkout@v4
    
    - name: üéØ Initialize Test & Scan Phase
      uses: ./.github/actions/security-reporter
      with:
        phase: "test-start"
        title: "üß™ Test & Security Scan Phase"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: "1.7.1"
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: üì¶ Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction
        echo "### üì¶ Dependencies Installed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Python dependencies installed successfully with Poetry" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: üîí Verify lock file integrity
      run: |
        poetry check --lock 
        echo "### üîí Lock File Verification" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Poetry lock file integrity verified" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: üß™ Run tests
      run: |
        echo "### üß™ Test Results" >> $GITHUB_STEP_SUMMARY
        poetry run pytest tests/ -v --tb=short > test_results.txt 2>&1 || TEST_FAILED=1
        
        if [ "${TEST_FAILED}" == "1" ]; then
          echo "‚ùå **Tests Failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          tail -20 test_results.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "‚úÖ **All Tests Passed**" >> $GITHUB_STEP_SUMMARY
          TEST_COUNT=$(grep -c "PASSED\|FAILED\|ERROR" test_results.txt || echo "0")
          PASSED_COUNT=$(grep -c "PASSED" test_results.txt || echo "0")
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üéØ Total Tests | $TEST_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Passed | $PASSED_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ùå Failed | 0 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: üîç Run linters and security checks
      run: |
        echo "### üîç Code Quality & Security Checks" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Black formatting check
        if poetry run black --check src/ tests/ > black_results.txt 2>&1; then
          echo "‚úÖ **Code Formatting (Black)**: All files properly formatted" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Code Formatting (Black)**: Some files need formatting" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>View formatting issues</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat black_results.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi
        
        # MyPy type checking
        if poetry run mypy src/ > mypy_results.txt 2>&1; then
          echo "‚úÖ **Type Checking (MyPy)**: No type errors found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Type Checking (MyPy)**: Type issues detected" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>View type checking results</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat mypy_results.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security audit
        poetry run pip-audit --format=json --output=audit-results.json
        VULN_COUNT=$(jq '.vulnerabilities | length' audit-results.json 2>/dev/null || echo "0")
        
        if [ "$VULN_COUNT" -eq 0 ]; then
          echo "‚úÖ **Security Audit (pip-audit)**: No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Security Audit (pip-audit)**: $VULN_COUNT vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>View vulnerability details</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          jq '.vulnerabilities[] | {package: .package.name, vulnerability: .vulnerability.id, description: .vulnerability.description}' audit-results.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: üìã Generate SBOM with enhanced metadata
      run: |
        poetry run python scripts/generate_sbom.py > sbom.json
        SBOM_HASH=$(sha256sum sbom.json | cut -d' ' -f1)
        
        # Enhanced SBOM summary
        echo "### üìã Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        COMPONENT_COUNT=$(jq '.components | length' sbom.json 2>/dev/null || echo "0")
        DIRECT_DEPS=$(jq '.components | map(select(.scope == "required")) | length' sbom.json 2>/dev/null || echo "0")
        DEV_DEPS=$(jq '.components | map(select(.scope == "optional")) | length' sbom.json 2>/dev/null || echo "0")
        
        echo "| üìä SBOM Metrics | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| üì¶ Total Components | $COMPONENT_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| üéØ Direct Dependencies | $DIRECT_DEPS |" >> $GITHUB_STEP_SUMMARY
        echo "| üõ†Ô∏è Dev Dependencies | $DEV_DEPS |" >> $GITHUB_STEP_SUMMARY
        echo "| üîê SBOM Hash | \`${SBOM_HASH:0:12}...\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "‚úÖ SBOM generated with $COMPONENT_COUNT components" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Upload SBOM
      id: upload-sbom
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom.json
        retention-days: 90

    - name: üõ°Ô∏è Run baseline Trivy scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'baseline-scan.json'

    - name: üìä Process baseline scan results
      uses: ./.github/actions/security-reporter
      with:
        phase: "scan-results"
        scan-file: "baseline-scan.json"
        title: "üõ°Ô∏è Baseline Security Scan Results"

    - name: Upload baseline scan results
      id: upload-scan
      uses: actions/upload-artifact@v4
      with:
        name: baseline-scan-${{ github.sha }}
        path: baseline-scan.json
        retention-days: 30

    - name: üéØ Complete Test Phase
      uses: ./.github/actions/security-reporter
      with:
        phase: "test-complete"
        title: "‚úÖ Test & Scan Phase Complete!"

  build-container:
    needs: test-and-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.meta.outputs.tags }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: üèóÔ∏è Initialize Build Phase
      run: |
        echo "## üèóÔ∏è Container Build & Signing Phase" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéØ **Building secure, signed container image with SLSA provenance**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-,enable={{is_default_branch}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
    
    - name: üõ†Ô∏è Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: false  # We'll generate SLSA provenance separately

    - name: üìä Build Results Summary
      run: |
        echo "### üõ†Ô∏è Container Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        DIGEST="${{ steps.build.outputs.digest }}"
        
        echo "| üìã Build Information | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| üè∑Ô∏è Image Tags | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| üîê Image Digest | \`${DIGEST:0:19}...\` |" >> $GITHUB_STEP_SUMMARY
        echo "| üñ•Ô∏è Platforms | linux/amd64, linux/arm64 |" >> $GITHUB_STEP_SUMMARY
        echo "| üì¶ Registry | ${{ env.REGISTRY }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ö° Cache | GitHub Actions Cache |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Multi-platform container image built and pushed successfully**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: üîê Sign container image with private key
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: |
        IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
        echo "üîê Signing container image: $IMAGE_REF" >> $GITHUB_STEP_SUMMARY
        
        if cosign sign --yes --key env://COSIGN_PRIVATE_KEY "$IMAGE_REF"; then
          echo "‚úÖ **Container image signed successfully with Cosign**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Container signing failed - proceeding with unsigned image**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: üìú Generate GitHub Attestations
      uses: actions/attest-build-provenance@v1
      id: attest
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}

    - name: üéØ Complete Build Phase
      run: |
        echo "### üéâ Container Build Phase Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Container built, signed, and attested**" >> $GITHUB_STEP_SUMMARY
        echo "üìú **GitHub attestations generated**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Phase**: üîç VEX Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY