name: 🧪 Test SBOM Processing

on:
  workflow_dispatch:
    inputs:
      test-image:
        description: 'Container image to test SBOM generation (default: alpine:latest)'
        required: false
        default: 'alpine:latest'
        type: string
  pull_request:
    paths:
      - '.github/actions/sbom-processor/**'
      - 'scripts/generate_sbom.py'
      - '.github/workflows/test-sbom-processing.yml'

jobs:
  test-sbom-processor:
    runs-on: ubuntu-latest
    steps:
    - name: 🧪 Initialize SBOM Test
      run: |
        echo "# 🧪 SBOM Processing Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Testing SBOM generation and consolidation**" >> $GITHUB_STEP_SUMMARY
        echo "📦 **Test Image**: \`${{ inputs.test-image || 'alpine:latest' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a
      with:
        version: "1.7.1"
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: 📦 Install dependencies (quick)
      run: |
        poetry install --no-interaction --only main
        echo "✅ **Dependencies installed**" >> $GITHUB_STEP_SUMMARY

    - name: 📋 Generate build-time SBOM
      run: |
        echo "### 📋 Build-time SBOM Generation" >> $GITHUB_STEP_SUMMARY
        poetry run python scripts/generate_sbom.py > test-sbom.json
        
        COMPONENT_COUNT=$(jq '.components | length' test-sbom.json 2>/dev/null || echo "0")
        echo "✅ **Build-time SBOM**: $COMPONENT_COUNT components" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Upload build-time SBOM for testing
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: test-build-sbom-${{ github.run_id }}
        path: test-sbom.json
        retention-days: 1

    - name: 🧪 Test SBOM Processor Action
      uses: ./.github/actions/sbom-processor
      id: test-processor
      with:
        build-sbom-artifact: test-build-sbom-${{ github.run_id }}
        container-image: ${{ inputs.test-image || 'alpine:latest' }}
        output-prefix: test

    - name: 📊 Validate SBOM Processing Results
      run: |
        echo "### 📊 SBOM Processing Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if output files exist
        BUILD_SBOM="${{ steps.test-processor.outputs.build-sbom-path }}"
        CONTAINER_SBOM="${{ steps.test-processor.outputs.container-sbom-path }}"
        CONSOLIDATED_SBOM="${{ steps.test-processor.outputs.consolidated-sbom-path }}"
        
        echo "| 📋 SBOM Type | Status | Path |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|------|" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "$BUILD_SBOM" ]; then
          BUILD_COMPONENTS=$(jq '.components | length' "$BUILD_SBOM" 2>/dev/null || echo "0")
          echo "| 🏗️ Build-time | ✅ Generated | $BUILD_COMPONENTS components |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🏗️ Build-time | ❌ Missing | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "$CONTAINER_SBOM" ]; then
          CONTAINER_COMPONENTS=$(jq '.components | length' "$CONTAINER_SBOM" 2>/dev/null || echo "0")
          echo "| 📦 Container | ✅ Generated | $CONTAINER_COMPONENTS components |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 📦 Container | ❌ Missing | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "$CONSOLIDATED_SBOM" ]; then
          TOTAL_COMPONENTS=$(jq '.components | length' "$CONSOLIDATED_SBOM" 2>/dev/null || echo "0")
          TOTAL_LAYERS=$(jq '.compositions | length' "$CONSOLIDATED_SBOM" 2>/dev/null || echo "0")
          echo "| 🔄 Consolidated | ✅ Generated | $TOTAL_COMPONENTS components, $TOTAL_LAYERS layers |" >> $GITHUB_STEP_SUMMARY
          
          # Validate consolidated SBOM structure
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Consolidated SBOM Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for SLSA metadata
          SLSA_BUILD_TYPE=$(jq -r '.metadata.properties[]? | select(.name == "slsa:build_type") | .value' "$CONSOLIDATED_SBOM" 2>/dev/null || echo "missing")
          SBOM_LAYERS=$(jq -r '.metadata.properties[]? | select(.name == "sbom:layer_types") | .value' "$CONSOLIDATED_SBOM" 2>/dev/null || echo "missing")
          
          echo "| 🔍 Validation Check | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📜 SLSA Build Type | $([ "$SLSA_BUILD_TYPE" != "missing" ] && echo "✅ Present" || echo "❌ Missing") |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ SBOM Layer Types | $([ "$SBOM_LAYERS" != "missing" ] && echo "✅ Present" || echo "❌ Missing") |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Components Array | $([ "$TOTAL_COMPONENTS" -gt 0 ] && echo "✅ $TOTAL_COMPONENTS items" || echo "❌ Empty") |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Compositions Array | $([ "$TOTAL_LAYERS" -gt 0 ] && echo "✅ $TOTAL_LAYERS layers" || echo "❌ Empty") |" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "| 🔄 Consolidated | ❌ Missing | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: 📤 Upload test results
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: sbom-test-results-${{ github.run_id }}
        path: |
          sbom-processing/*.json
        retention-days: 3

    - name: 🎊 Test Summary
      if: always()
      run: |
        echo "### 🎊 Test Completion Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **All SBOM processing tests passed!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Ready for full pipeline integration**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some tests failed - check logs above**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Review failed steps before running full pipeline**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "⚡ **Fast test completed** • 🧪 **Isolated validation** • 🔄 **Ready for iteration**" >> $GITHUB_STEP_SUMMARY