name: SLSA Level 3 Build and Security Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-scan:
    runs-on: ubuntu-latest
    outputs:
      sbom-hash: ${{ steps.sbom.outputs.hash }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: "1.7.1"
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Verify lock file integrity
      run: poetry check --lock 
    
    - name: Run tests
      run: poetry run pytest tests/ -v 
    
    - name: Run linters and security checks
      run: |
        poetry run black --check src/ tests/
        poetry run ruff src/ tests/
        poetry run mypy src/
        poetry run pip-audit --format=json --output=audit-results.json
    
    - name: Generate SBOM with enhanced metadata
      id: sbom
      run: |
        poetry run python scripts/generate_sbom.py > sbom.json
        echo "hash=$(sha256sum sbom.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom.json
        retention-days: 90

  build-container:
    needs: test-and-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.meta.outputs.tags }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: false  # We'll generate SLSA provenance separately
    
    - name: Generate GitHub Attestations
      uses: actions/attest-build-provenance@v1
      id: attest
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}

  slsa-provenance:
    needs: build-container
    if: github.event_name != 'pull_request'
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ghcr.io/${{ github.repository }}
      digest: ${{ needs.build-container.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  vulnerability-analysis:
    needs: build-container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Download SBOM
      uses: actions/download-artifact@v4
      with:
        name: sbom-${{ github.sha }}
    
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-container.outputs.image-digest }}
        format: 'json'
        output: 'trivy-results.json'
    
    - name: Run Trivy on SBOM
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'sbom'
        scan-ref: 'sbom.json'
        format: 'sarif'
        output: 'trivy-sbom-results.sarif'
    
    - name: Generate enhanced VEX document
      run: |
        python scripts/generate_vex.py \
          --trivy-results trivy-results.json \
          --sbom sbom.json \
          --output vex.json
    
    - name: Upload SARIF results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-sbom-results.sarif'
    
    - name: Upload VEX document
      uses: actions/upload-artifact@v4
      with:
        name: vex-${{ github.sha }}
        path: vex.json

  verify-attestations:
    needs: [build-container, slsa-provenance]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Install SLSA Verifier
      uses: slsa-framework/slsa-verifier/actions/installer@v2.5.1
    
    - name: Verify container signature and SLSA provenance
      run: |
        # Verify signature
        cosign verify \
          --certificate-identity-regexp=".*" \
          --certificate-oidc-issuer-regexp=".*" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-container.outputs.image-digest }}
        
        # Verify SLSA provenance
        slsa-verifier verify-image \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-container.outputs.image-digest }} \
          --source-uri github.com/${{ github.repository }}
