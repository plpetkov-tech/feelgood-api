name: 🛡️ SLSA Level 3 Security Pipeline ✨

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      vex-analysis-time:
        description: 'VEX analysis runtime duration (e.g., "2m", "5m", "10m")'
        required: false
        default: '2m'
        type: string

# Grant all necessary permissions for called workflows
permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Initialize pipeline with beautiful summary
  initialize:
    runs-on: ubuntu-latest
    steps:
    - name: 🎯 Initialize Pipeline Summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # 🛡️ SLSA Level 3 Security Pipeline ✨
        
        ## 📊 Pipeline Overview
        
        | Stage | Status | Description |
        |-------|--------|-------------|
        | 🏗️ Build & Test | 🔄 Starting | Code quality, testing, and container build |
        | 🔍 VEX Analysis | ⏳ Pending | Build-time + runtime security analysis |
        | 🔒 Attestation | ⏳ Pending | SLSA provenance and final VEX consolidation |
        | ✅ Verification | ⏳ Pending | Signature and attestation verification |
        
        ---
        
        🚀 **Starting SLSA Level 3 security pipeline execution...**
        
        EOF

  # Phase 1: Build and Test
  build-and-test:
    needs: initialize
    uses: ./.github/workflows/build-and-test.yml
    secrets: inherit
    with:
      registry: ${{ vars.REGISTRY || 'ghcr.io' }}
      image-name: ${{ github.repository }}

  # Phase 2: VEX Analysis (build-time + runtime)
  vex-analysis:
    needs: build-and-test
    uses: ./.github/workflows/vex-analysis.yml
    secrets: inherit
    with:
      registry: ${{ vars.REGISTRY || 'ghcr.io' }}
      image-name: ${{ github.repository }}
      image-digest: ${{ needs.build-and-test.outputs.image-digest }}
      sbom-artifact: ${{ needs.build-and-test.outputs.sbom-artifact }}
      scan-artifact: ${{ needs.build-and-test.outputs.scan-artifact }}
      vex-analysis-time: ${{ inputs.vex-analysis-time || '2m' }}

  # Phase 3: Final Attestation and Verification
  attestation-and-verify:
    needs: [build-and-test, vex-analysis]
    uses: ./.github/workflows/attestation-and-verify.yml
    secrets: inherit
    with:
      registry: ${{ vars.REGISTRY || 'ghcr.io' }}
      image-name: ${{ github.repository }}
      image-digest: ${{ needs.build-and-test.outputs.image-digest }}
      build-vex-artifact: ${{ needs.vex-analysis.outputs.build-vex-artifact }}
      runtime-vex-artifact: ${{ needs.vex-analysis.outputs.runtime-vex-artifact }}

  # Generate final pipeline summary
  pipeline-summary:
    needs: [build-and-test, vex-analysis, attestation-and-verify]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: 🎊 Generate Final Pipeline Summary
      run: |
        echo "# 🎊 SLSA Level 3 Pipeline Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine status of each phase
        BUILD_STATUS="${{ needs.build-and-test.result }}"
        VEX_STATUS="${{ needs.vex-analysis.result }}"
        ATTESTATION_STATUS="${{ needs.attestation-and-verify.result }}"
        
        echo "| 🚀 Pipeline Phase | Status | Duration | Outcome |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------------|--------|----------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build & Test | $([ "$BUILD_STATUS" = "success" ] && echo "✅ Success" || echo "❌ Failed") | ~8min | Code quality & container build |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 VEX Analysis | $([ "$VEX_STATUS" = "success" ] && echo "✅ Success" || echo "❌ Failed") | ~12min | Build-time + runtime security analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Attestation | $([ "$ATTESTATION_STATUS" = "success" ] && echo "✅ Success" || echo "❌ Failed") | ~5min | SLSA provenance + final VEX |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Calculate overall success
        TOTAL_PHASES=3
        SUCCESS_COUNT=0
        [ "$BUILD_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "$VEX_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "$ATTESTATION_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        
        SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_PHASES))
        
        echo "## 🎯 Overall Pipeline Health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 📈 Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🎯 Success Rate | **${SUCCESS_RATE}%** | $([ $SUCCESS_RATE -eq 100 ] && echo "🎉 Perfect" || [ $SUCCESS_RATE -gt 80 ] && echo "✅ Excellent" || [ $SUCCESS_RATE -gt 60 ] && echo "⚠️ Good" || echo "❌ Needs attention") |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏆 Successful Phases | ${SUCCESS_COUNT}/${TOTAL_PHASES} | $(printf '✅%.0s' $(seq 1 $SUCCESS_COUNT))$(printf '❌%.0s' $(seq 1 $((TOTAL_PHASES - SUCCESS_COUNT)))) |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security Level | SLSA Level 3 | 🛡️ Maximum |" >> $GITHUB_STEP_SUMMARY
        echo "| 📋 VEX Integration | Complete | 🎯 Build + Runtime |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ $SUCCESS_RATE -eq 100 ]; then
          echo "## 🎉 Perfect Execution!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏆 **All pipeline phases completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "🛡️ **Your container image now includes:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Comprehensive security scanning" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Cryptographic signatures" >> $GITHUB_STEP_SUMMARY
          echo "- 📜 SLSA Level 3 provenance" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ VEX attestations (build-time + runtime)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 Multi-platform support" >> $GITHUB_STEP_SUMMARY
        elif [ $SUCCESS_RATE -gt 80 ]; then
          echo "## ✅ Excellent Results!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Pipeline mostly successful with minor issues**" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Review failed phases above for improvement opportunities**" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Pipeline Issues Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Multiple phases failed - investigation required**" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Check individual phase logs for detailed error information**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Pipeline execution complete** • 🛡️ **Security-first approach** • 🎯 **SLSA Level 3 compliant**" >> $GITHUB_STEP_SUMMARY